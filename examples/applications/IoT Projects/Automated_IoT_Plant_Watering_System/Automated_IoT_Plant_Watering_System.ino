// -----------------------------------------------------------------------------
// Project: Automated IoT Plant Watering System
// File: Automated_Plant_Watering.ino
// Description: Monitors soil moisture, automatically waters if below a threshold,
//              and provides manual watering control via the Arduino IoT Cloud.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <Arduino_ConnectionHandler.h> // For WiFi connection

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define SOIL_MOISTURE_PIN A0   // Analog pin for Soil Moisture Sensor (e.g., FC-28)
#define WATER_PUMP_RELAY_PIN D4 // Digital pin for Water Pump Relay (or transistor to control pump)

// -----------------------------------------------------------------------------
// Constants and Thresholds
// -----------------------------------------------------------------------------
// Calibrate these values based on your specific soil moisture sensor and soil conditions.
// For most analog soil moisture sensors:
//   - A higher analog value (closer to 1023) usually means drier soil.
//   - A lower analog value (closer to 0) usually means wetter soil.
const int MOISTURE_DRY_VALUE = 700; // Analog value when soil is considered dry (adjust as needed)
const int MOISTURE_WET_VALUE = 300; // Analog value when soil is considered wet (adjust as needed)

const long WATERING_DURATION = 3000; // How long the pump runs for manual/auto watering (milliseconds)
const long MOISTURE_READ_INTERVAL = 5000; // Read moisture every 5 seconds

// -----------------------------------------------------------------------------
// Global Variables (for internal use, not directly linked to Cloud Properties)
// -----------------------------------------------------------------------------
unsigned long lastMoistureReadTime = 0; // To control sensor reading frequency
unsigned long pumpStartTime = 0;        // To track pump run duration
bool pumpRunning = false;               // Internal state of the pump

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Set pin modes for soil moisture sensor and water pump
  pinMode(SOIL_MOISTURE_PIN, INPUT);
  pinMode(WATER_PUMP_RELAY_PIN, OUTPUT);

  // Ensure pump is off initially
  digitalWrite(WATER_PUMP_RELAY_PIN, LOW);
  waterPumpOn = false;        // Initialize Cloud property
  manualWatering = false;     // Initialize Cloud property
  autoWateringEnabled = true; // Start with auto watering enabled by default
  moistureThreshold = 500;    // Default threshold (adjust in Cloud Dashboard)

  Serial.println("Setup complete for Automated Plant Watering System.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // Read soil moisture periodically
  if (millis() - lastMoistureReadTime > MOISTURE_READ_INTERVAL) {
    readSoilMoisture();
    lastMoistureReadTime = millis();
  }

  // Handle automatic watering
  handleAutoWatering();

  // Manage pump state based on watering actions
  managePumpState();
}

// -----------------------------------------------------------------------------
// Function to read soil moisture and update Cloud property
// -----------------------------------------------------------------------------
void readSoilMoisture() {
  int rawMoisture = analogRead(SOIL_MOISTURE_PIN);
  soilMoisture = rawMoisture; // Update Cloud property with the raw analog value

  Serial.print("Raw Soil Moisture: ");
  Serial.println(soilMoisture);
}

// -----------------------------------------------------------------------------
// Function to handle automatic watering logic
// -----------------------------------------------------------------------------
void handleAutoWatering() {
  // Only auto-water if enabled, pump is not already running, and soil is drier than threshold
  // Remember: higher analog value = drier soil
  if (autoWateringEnabled && !pumpRunning && soilMoisture > moistureThreshold) {
    Serial.println("Auto-watering triggered: Soil is dry.");
    startPump();
  }
}

// -----------------------------------------------------------------------------
// Function to start the water pump
// -----------------------------------------------------------------------------
void startPump() {
  if (!pumpRunning) { // Prevent re-starting if already running
    digitalWrite(WATER_PUMP_RELAY_PIN, HIGH); // Turn pump ON
    waterPumpOn = true; // Update Cloud property
    pumpRunning = true; // Set internal flag
    pumpStartTime = millis(); // Record start time
    Serial.println("Water pump ON.");
  }
}

// -----------------------------------------------------------------------------
// Function to stop the water pump
// -----------------------------------------------------------------------------
void stopPump() {
  if (pumpRunning) {
    digitalWrite(WATER_PUMP_RELAY_PIN, LOW); // Turn pump OFF
    waterPumpOn = false; // Update Cloud property
    pumpRunning = false; // Set internal flag
    Serial.println("Water pump OFF.");
  }
}

// -----------------------------------------------------------------------------
// Function to manage the pump state (duration)
// -----------------------------------------------------------------------------
void managePumpState() {
  if (pumpRunning && (millis() - pumpStartTime >= WATERING_DURATION)) {
    Serial.println("Watering duration complete.");
    stopPump();
  }
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks
// -----------------------------------------------------------------------------

/*
  Callback function for when the manualWatering property changes in the Cloud.
  This allows manual control of the pump.
*/
void onManualWateringChange() {
  Serial.print("Cloud changed Manual Watering to: ");
  Serial.println(manualWatering ? "TRUE" : "FALSE");
  if (manualWatering) {
    if (!pumpRunning) { // Only start if not already running
      Serial.println("Manual watering initiated.");
      startPump();
    }
    // Reset manualWatering property in Cloud after starting, making it a "push button" action
    manualWatering = false; // This will set the switch back to OFF on the dashboard
  }
}

/*
  Callback function for when the autoWateringEnabled property changes in the Cloud.
  This enables/disables the automatic watering feature.
*/
void onAutoWateringEnabledChange() {
  Serial.print("Cloud changed Auto Watering Enabled to: ");
  Serial.println(autoWateringEnabled ? "TRUE" : "FALSE");
  // No direct action needed here, handleAutoWatering() will respect this state.
}

/*
  Callback function for when the moistureThreshold property changes in the Cloud.
  This allows setting the threshold for automatic watering.
*/
void onMoistureThresholdChange() {
  Serial.print("Cloud changed Moisture Threshold to: ");
  Serial.println(moistureThreshold);
  // No direct action needed here, handleAutoWatering() will respect this value.
}

/*
  Callback function for when the soilMoisture property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onSoilMoistureChange() {
  Serial.print("Cloud attempted to change Soil Moisture to: ");
  Serial.println(soilMoisture);
}

/*
  Callback function for when the waterPumpOn property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onWaterPumpOnChange() {
  Serial.print("Cloud attempted to change Water Pump On to: ");
  Serial.println(waterPumpOn ? "TRUE" : "FALSE");
}
