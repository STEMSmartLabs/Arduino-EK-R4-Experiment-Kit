// -----------------------------------------------------------------------------
// Project: Interactive IoT Dashboard Display
// File: Interactive_Dashboard.ino
// Description: Reads temperature, light level, current time, and WiFi signal
//              strength. Displays this data on a local OLED screen and
//              sends it to the Arduino IoT Cloud.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud, sensors, and display.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <DHT.h>               // For DHT11/DHT22 Temperature and Humidity Sensor
#include <Wire.h>              // Required for I2C communication (OLED)
#include <Adafruit_GFX.h>      // Core graphics library
#include <Adafruit_SSD1306.h>  // For SSD1306 OLED display
#include <WiFi.h>              // For WiFi.RSSI() to get signal strength
#include <TimeLib.h>           // For time functions

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define DHT_PIN D8             // Digital pin for DHT11/DHT22 sensor data
#define LDR_PIN A1             // Analog pin for Light Dependent Resistor (LDR)

// OLED display dimensions
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The OLED_RESET pin is typically -1 if it's shared with the Arduino's reset.
// Common I2C address for SSD1306 128x64 is 0x3C or 0x3D.
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1); // -1 for shared reset

// -----------------------------------------------------------------------------
// Sensor Objects
// -----------------------------------------------------------------------------
DHT dht(DHT_PIN, DHT11); // Initialize DHT sensor (DHT11 or DHT22).
                         // Change DHT11 to DHT22 if you are using a DHT22 sensor.

// -----------------------------------------------------------------------------
// Constants
// -----------------------------------------------------------------------------
const long SENSOR_READ_INTERVAL = 5000; // Read sensors and update Cloud every 5 seconds

// -----------------------------------------------------------------------------
// Global Variables (for internal use, not directly linked to Cloud Properties)
// -----------------------------------------------------------------------------
unsigned long lastSensorReadTime = 0; // To control sensor reading frequency

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Initialize DHT sensor
  dht.begin();
  Serial.println("DHT sensor initialized.");

  // Initialize OLED display
  // SSD1306_SWITCHCAPVCC is for internal OLED charge pump
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Check for I2C address 0x3C
    Serial.println(F("SSD1306 allocation failed or not found. Check wiring and address!"));
    for (;;); // Don't proceed, loop forever
  }
  display.display(); // Show initial Adafruit splash screen
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("IoT Dashboard Ready!");
  display.display();
  Serial.println("OLED Display initialized.");

  // Set pin mode for LDR
  pinMode(LDR_PIN, INPUT);

  // Initialize Cloud properties to default values
  temperature = 0.0;
  lightLevel = 0.0;
  strcpy(currentTime, "HH:MM:SS");
  wifiStrength = 0;

  Serial.println("Setup complete for Interactive IoT Dashboard Display.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // Read sensors and update display periodically
  if (millis() - lastSensorReadTime > SENSOR_READ_INTERVAL) {
    readSensorData();
    updateDisplay(); // Update display with new sensor data
    lastSensorReadTime = millis();
  }
}

// -----------------------------------------------------------------------------
// Function to read sensor data and update Cloud properties
// -----------------------------------------------------------------------------
void readSensorData() {
  // --- Read Temperature from DHT sensor ---
  float t = dht.readTemperature();
  if (isnan(t)) {
    Serial.println("Failed to read temperature from DHT sensor!");
  } else {
    temperature = t; // Update Cloud property
    Serial.print("Temp: "); Serial.print(temperature); Serial.println("Â°C");
  }

  // --- Read Light Level from LDR ---
  int rawLight = analogRead(LDR_PIN);
  // Map raw analog value (0-1023) to a percentage (0-100)
  lightLevel = map(rawLight, 0, 1023, 0, 100);
  Serial.print("Light Level: "); Serial.print(lightLevel); Serial.println("%");

  // --- Get Current Time ---
  // Arduino Cloud automatically syncs time. Use now() from TimeLib.h.
  // Make sure your board has an internet connection for time synchronization.
  time_t currentEpochTime = now();
  sprintf(currentTime, "%02d:%02d:%02d", hour(currentEpochTime), minute(currentEpochTime), second(currentEpochTime));
  Serial.print("Current Time: "); Serial.println(currentTime);

  // --- Get WiFi Signal Strength (RSSI) ---
  if (WiFi.status() == WL_CONNECTED) {
    wifiStrength = WiFi.RSSI(); // Get RSSI value
    Serial.print("WiFi RSSI: "); Serial.print(wifiStrength); Serial.println(" dBm");
  } else {
    wifiStrength = 0; // Indicate no WiFi connection
    Serial.println("WiFi not connected, RSSI not available.");
  }
}

// -----------------------------------------------------------------------------
// Function to update the OLED display
// -----------------------------------------------------------------------------
void updateDisplay() {
  display.clearDisplay(); // Clear the buffer

  display.setTextSize(1); // Smallest text size
  display.setTextColor(SSD1306_WHITE); // White text

  // Display Temperature
  display.setCursor(0, 0);
  display.print("Temp: ");
  display.print(temperature, 1); // Display with 1 decimal place
  display.println(" C");

  // Display Light Level
  display.setCursor(0, 10);
  display.print("Light: ");
  display.print(lightLevel);
  display.println(" %");

  // Display Current Time
  display.setCursor(0, 20);
  display.print("Time: ");
  display.println(currentTime);

  // Display WiFi Strength
  display.setCursor(0, 30);
  display.print("WiFi: ");
  display.print(wifiStrength);
  display.println(" dBm");

  // Add a simple status line for Cloud connection
  display.setCursor(0, 50);
  if (ArduinoCloud.connected()) {
    display.println("Cloud: Connected");
  } else {
    display.println("Cloud: Disconnected");
  }

  display.display(); // Show the content on the OLED
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks (read-only properties, so callbacks are for monitoring)
// -----------------------------------------------------------------------------

/*
  Callback functions for read-only properties (for monitoring/debugging).
  These functions will be triggered if the Cloud attempts to write to these properties,
  which it shouldn't for READ-only properties.
*/
void onTemperatureChange() {
  Serial.print("Cloud attempted to change Temperature to: ");
  Serial.println(temperature);
}

void onLightLevelChange() {
  Serial.print("Cloud attempted to change Light Level to: ");
  Serial.println(lightLevel);
}

void onCurrentTimeChange() {
  Serial.print("Cloud attempted to change Current Time to: ");
  Serial.println(currentTime);
}

void onWifiStrengthChange() {
  Serial.print("Cloud attempted to change WiFi Strength to: ");
  Serial.println(wifiStrength);
}
