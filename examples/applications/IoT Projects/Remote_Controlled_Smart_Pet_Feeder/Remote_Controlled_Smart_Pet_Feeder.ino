// -----------------------------------------------------------------------------
// Project: Remote-Controlled Smart Pet Feeder
// File: Remote_Controlled_Pet_Feeder.ino
// Description: Allows manual and automatic dispensing of pet food via a servo motor.
//              Uses an ultrasonic sensor to detect food bowl status (empty/full)
//              and triggers auto-dispense if empty for a set duration.
//              Sends food level, bowl status, and last dispense time to the
//              Arduino IoT Cloud.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud, Servo, and Ultrasonic sensor.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <Servo.h>             // For controlling a servo motor
#include <Ultrasonic.h>        // For ultrasonic distance sensor (e.g., HC-SR04)
#include <TimeLib.h>           // For time functions to get current time for timestamp

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define SERVO_PIN D9           // Digital pin for Servo motor control (e.g., SG90)
#define ULTRASONIC_TRIG_PIN D6 // Digital pin for Ultrasonic sensor Trigger
#define ULTRASONIC_ECHO_PIN D7 // Digital pin for Ultrasonic sensor Echo

// -----------------------------------------------------------------------------
// Sensor and Actuator Objects
// -----------------------------------------------------------------------------
Servo foodServo;                       // Create a servo object
Ultrasonic ultrasonic(ULTRASONIC_TRIG_PIN, ULTRASONIC_ECHO_PIN); // Ultrasonic sensor object

// -----------------------------------------------------------------------------
// Constants and Thresholds
// -----------------------------------------------------------------------------
const int SERVO_DISPENSE_ANGLE = 90; // Angle for dispensing food (adjust as needed for your feeder)
const int SERVO_REST_ANGLE = 0;      // Angle for resting position (adjust as needed)

// Ultrasonic sensor thresholds for food level and empty bowl detection
// Calibrate these values based on your feeder's design and sensor placement.
// Smallest distance when bowl is full, largest distance when bowl is empty.
const int BOWL_FULL_DISTANCE_CM = 5;  // Distance when food bowl is full (e.g., sensor close to food)
const int BOWL_EMPTY_DISTANCE_CM = 20; // Distance when food bowl is empty (e.g., sensor far from food)

// Threshold for automatic dispensing
// If the measured distance is GREATER than this, the bowl is considered EMPTY.
const int AUTO_DISPENSE_EMPTY_THRESHOLD_CM = 15; // Example: if distance > 15cm, bowl is empty

const long AUTO_DISPENSE_DELAY_MS = 5000; // Bowl must be empty for 5 seconds to trigger auto-dispense
const long SENSOR_READ_INTERVAL = 2000;  // Read ultrasonic sensor every 2 seconds

// -----------------------------------------------------------------------------
// Global Variables (for internal use, not directly linked to Cloud Properties)
// -----------------------------------------------------------------------------
unsigned long lastSensorReadTime = 0; // To control sensor reading frequency
unsigned long bowlEmptyStartTime = 0; // To track how long the bowl has been empty

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Attach servo to its pin
  foodServo.attach(SERVO_PIN);
  foodServo.write(SERVO_REST_ANGLE); // Ensure servo is at rest position
  Serial.println("Servo initialized.");

  // Initialize Cloud properties to default values
  dispenseFood = false;
  autoDispenseEnabled = false; // Start with auto-dispense disabled
  foodLevel = 0;
  bowlEmpty = true; // Assume empty until first reading
  strcpy(lastDispenseTime, "Never");

  Serial.println("Setup complete for Smart Pet Feeder.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // Read food level periodically
  if (millis() - lastSensorReadTime > SENSOR_READ_INTERVAL) {
    readFoodLevel();
    lastSensorReadTime = millis();
  }

  // Handle automatic dispensing logic
  handleAutoDispense();
}

// -----------------------------------------------------------------------------
// Function to read food level using ultrasonic sensor and update Cloud properties
// -----------------------------------------------------------------------------
void readFoodLevel() {
  long measuredDistanceCm = ultrasonic.read(); // Read distance in centimeters

  // Update bowlEmpty status
  bool currentBowlEmpty = (measuredDistanceCm > AUTO_DISPENSE_EMPTY_THRESHOLD_CM);
  if (currentBowlEmpty != bowlEmpty) { // Only update if status changes
    bowlEmpty = currentBowlEmpty;      // Update Cloud property
    if (bowlEmpty) {
      Serial.println("Bowl detected as EMPTY.");
      bowlEmptyStartTime = millis(); // Start timer when bowl becomes empty
    } else {
      Serial.println("Bowl detected as NOT EMPTY.");
      bowlEmptyStartTime = 0; // Reset timer if bowl is not empty
    }
  }

  // Map the distance to a food level percentage (0-100%)
  // Invert the mapping: closer distance (smaller value) means more food (higher percentage)
  // Ensure distance is within expected range to avoid out-of-bounds percentages
  int mappedFoodLevel = map(measuredDistanceCm, BOWL_EMPTY_DISTANCE_CM, BOWL_FULL_DISTANCE_CM, 0, 100);

  // Clamp the value to ensure it stays within 0-100%
  mappedFoodLevel = constrain(mappedFoodLevel, 0, 100);

  foodLevel = mappedFoodLevel; // Update Cloud property

  Serial.print("Distance: "); Serial.print(measuredDistanceCm); Serial.print("cm | Food Level: ");
  Serial.print(foodLevel); Serial.print("% | Bowl Empty: "); Serial.println(bowlEmpty ? "TRUE" : "FALSE");
}

// -----------------------------------------------------------------------------
// Function to dispense food (servo action)
// -----------------------------------------------------------------------------
void dispenseFoodAction() {
  Serial.println("Dispensing food...");
  foodServo.write(SERVO_DISPENSE_ANGLE); // Move servo to dispense position
  delay(1000); // Keep it there for a moment to dispense (adjust as needed)
  foodServo.write(SERVO_REST_ANGLE);     // Return servo to rest position
  Serial.println("Food dispensed.");

  // Update last dispense time with current time
  time_t currentEpochTime = now(); // Get current time from Cloud-synced RTC
  sprintf(lastDispenseTime, "%02d:%02d:%02d", hour(currentEpochTime), minute(currentEpochTime), second(currentEpochTime));
}

// -----------------------------------------------------------------------------
// Function to handle automatic dispensing logic
// -----------------------------------------------------------------------------
void handleAutoDispense() {
  // Check if auto-dispense is enabled, bowl is empty, and it has been empty for AUTO_DISPENSE_DELAY_MS
  if (autoDispenseEnabled && bowlEmpty && (millis() - bowlEmptyStartTime >= AUTO_DISPENSE_DELAY_MS)) {
    Serial.println("Auto-dispense triggered: Bowl empty for too long.");
    dispenseFoodAction();
    bowlEmptyStartTime = millis(); // Reset timer after dispensing to prevent immediate re-trigger
  }
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks
// -----------------------------------------------------------------------------

/*
  Callback function for when the dispenseFood property changes in the Cloud.
  This allows manual triggering of food dispensing.
*/
void onDispenseFoodChange() {
  Serial.print("Cloud changed Dispense Food to: ");
  Serial.println(dispenseFood ? "TRUE" : "FALSE");
  if (dispenseFood) {
    dispenseFoodAction();
    // Reset the dispenseFood property in the Cloud after dispensing
    // This makes it a "push button" action from the dashboard
    dispenseFood = false; // Set the Cloud property back to false
  }
}

/*
  Callback function for when the autoDispenseEnabled property changes in the Cloud.
  This enables/disables the automatic food dispensing feature.
*/
void onAutoDispenseEnabledChange() {
  Serial.print("Cloud changed Auto Dispense Enabled to: ");
  Serial.println(autoDispenseEnabled ? "TRUE" : "FALSE");
  // No direct action needed here, handleAutoDispense() will respect this state.
}

/*
  Callback functions for read-only properties (for monitoring/debugging).
  These functions will be triggered if the Cloud attempts to write to these properties,
  which it shouldn't for READ-only properties.
*/
void onFoodLevelChange() {
  Serial.print("Cloud attempted to change Food Level to: ");
  Serial.println(foodLevel);
}

void onBowlEmptyChange() {
  Serial.print("Cloud attempted to change Bowl Empty to: ");
  Serial.println(bowlEmpty ? "TRUE" : "FALSE");
}

void onLastDispenseTimeChange() {
  Serial.print("Cloud attempted to change Last Dispense Time to: ");
  Serial.println(lastDispenseTime);
}
