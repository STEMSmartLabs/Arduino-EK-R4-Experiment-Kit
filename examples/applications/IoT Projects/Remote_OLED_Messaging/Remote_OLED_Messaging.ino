// -----------------------------------------------------------------------------
// Project: IoT Remote OLED Messaging Display
// File: Remote_OLED_Messaging.ino
// Description: Receives text messages from the Arduino IoT Cloud dashboard
//              and displays them on a local OLED screen.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud and OLED display.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <Wire.h>              // Required for I2C communication (OLED)
#include <Adafruit_GFX.h>      // Core graphics library
#include <Adafruit_SSD1306.h>  // For SSD1306 OLED display

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
// OLED display uses I2C (SDA A4, SCL A5 on Uno/Nano, or dedicated I2C pins on ESP32/ESP8266)

// OLED display dimensions
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The OLED_RESET pin is typically -1 if it's shared with the Arduino's reset.
// Common I2C address for SSD1306 128x64 is 0x3C or 0x3D.
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1); // -1 for shared reset

// -----------------------------------------------------------------------------
// Constants
// -----------------------------------------------------------------------------
// No specific sensor read intervals needed as updates are event-driven by Cloud.

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Initialize OLED display
  // SSD1306_SWITCHCAPVCC is for internal OLED charge pump
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Check for I2C address 0x3C
    Serial.println(F("SSD1306 allocation failed or not found. Check wiring and address!"));
    for (;;); // Don't proceed, loop forever
  }
  display.display(); // Show initial Adafruit splash screen
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1); // Set default text size
  display.setTextColor(SSD1306_WHITE); // Set default text color
  display.setCursor(0, 0);
  display.println("Waiting for Cloud");
  display.println("Message...");
  display.display();
  Serial.println("OLED Display initialized.");

  // Initialize Cloud property with a default message
  strcpy(displayMessage, "Hello from Arduino!");
  Serial.println("Initial message set.");

  Serial.println("Setup complete for Remote OLED Messaging Display.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // The main logic for updating the OLED is handled by the onDisplayMessageChange callback.
  // No continuous updates needed in loop unless displaying dynamic local data.
}

// -----------------------------------------------------------------------------
// Function to update the OLED display with the current message
// -----------------------------------------------------------------------------
void updateOLEDWithMessage() {
  display.clearDisplay(); // Clear the buffer

  display.setTextSize(1); // Smallest text size
  display.setTextColor(SSD1306_WHITE); // White text

  // Set cursor to top-left
  display.setCursor(0, 0);

  // Print the message. The display will automatically wrap text if it's too long.
  display.println(displayMessage);

  display.display(); // Show the content on the OLED
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callback
// -----------------------------------------------------------------------------

/*
  Callback function for when the displayMessage property changes in the Cloud.
  This triggers the OLED update with the new message.
*/
void onDisplayMessageChange() {
  Serial.print("New message received from Cloud: ");
  Serial.println(displayMessage);
  updateOLEDWithMessage(); // Call function to update the OLED display
}
