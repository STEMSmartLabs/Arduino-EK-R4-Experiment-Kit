// -----------------------------------------------------------------------------
// Project: Cloud-Connected Weather Data Logger
// File: Cloud_Weather_Logger.ino
// Description: Reads temperature and humidity (and optionally pressure) from
//              sensors and logs the data to the Arduino IoT Cloud.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud and sensors.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <DHT.h>               // For DHT11/DHT22 Temperature and Humidity Sensor
// If you are using a BMP280 or BME280 sensor for pressure, uncomment the lines below
// and ensure you have installed the Adafruit BMP280 Library and Adafruit Unified Sensor Library.
// #include <Wire.h>              // Required for I2C communication with BMP/BME sensors
// #include <Adafruit_BMP280.h> // Uncomment if using BMP280 for pressure
// #include <Adafruit_BME280.h> // Uncomment if using BME280 for pressure, also provides temp/hum
// #include <Adafruit_Sensor.h> // Required for Adafruit sensors

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define DHT_PIN D8             // Digital pin for DHT11/DHT22 sensor data

// For I2C sensors like BMP280/BME280, no specific digital pins are needed,
// they typically connect to SDA (A4) and SCL (A5) on Arduino Uno/Nano.

// -----------------------------------------------------------------------------
// Sensor Objects
// -----------------------------------------------------------------------------
DHT dht(DHT_PIN, DHT11); // Initialize DHT sensor (DHT11 or DHT22).
                         // If using DHT22, change DHT11 to DHT22.

// If using a BMP280 or BME280, uncomment and initialize the sensor object:
// Adafruit_BMP280 bmp; // For BMP280
// Adafruit_BME280 bme; // For BME280 (can provide temp, hum, pressure)

// -----------------------------------------------------------------------------
// Constants
// -----------------------------------------------------------------------------
const long SENSOR_READ_INTERVAL = 10000; // Read sensors and update Cloud every 10 seconds

// -----------------------------------------------------------------------------
// Global Variables (for internal use, not directly linked to Cloud Properties)
// -----------------------------------------------------------------------------
unsigned long lastSensorReadTime = 0; // To control sensor reading frequency

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Initialize DHT sensor
  dht.begin();
  Serial.println("DHT sensor initialized.");

  // Initialize BMP280/BME280 (uncomment if using these sensors)
  /*
  // For BMP280:
  if (!bmp.begin()) {
    Serial.println(F("Could not find a valid BMP280 sensor, check wiring!"));
    while (1); // Halt if sensor not found
  }
  Serial.println("BMP280 sensor initialized.");
  */

  /*
  // For BME280 (can provide temp, hum, pressure):
  if (!bme.begin()) {
    Serial.println(F("Could not find a valid BME280 sensor, check wiring!"));
    while (1); // Halt if sensor not found
  }
  Serial.println("BME280 sensor initialized.");
  */

  // Initialize Cloud properties to default values
  temperature = 0.0;
  humidity = 0.0;
  pressure = 0.0; // Only if using a pressure sensor

  Serial.println("Setup complete for Cloud-Connected Weather Data Logger.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // Read sensors periodically
  if (millis() - lastSensorReadTime > SENSOR_READ_INTERVAL) {
    readWeatherData();
    lastSensorReadTime = millis();
  }
}

// -----------------------------------------------------------------------------
// Function to read weather data and update Cloud properties
// -----------------------------------------------------------------------------
void readWeatherData() {
  // --- Read Humidity and Temperature from DHT sensor ---
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // Check if DHT reads failed
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    temperature = t; // Update Cloud property
    humidity = h;    // Update Cloud property
    Serial.print("Temp: "); Serial.print(temperature); Serial.print("Â°C, Hum: "); Serial.print(humidity); Serial.println("%");
  }

  // --- Read Pressure from BMP280/BME280 (uncomment if using these sensors) ---
  /*
  // For BMP280:
  pressure = bmp.readPressure() / 100.0F; // Convert Pa to hPa
  Serial.print("Pressure: "); Serial.print(pressure); Serial.println(" hPa");
  */

  /*
  // For BME280 (can read all three if used):
  // If using BME280, you might not need DHT.
  // temperature = bme.readTemperature(); // Already updated by DHT, or use BME's temp
  // humidity = bme.readHumidity();       // Already updated by DHT, or use BME's hum
  pressure = bme.readPressure() / 100.0F; // Convert Pa to hPa
  Serial.print("Pressure: "); Serial.print(pressure); Serial.println(" hPa");
  */
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks (read-only properties, so callbacks are for monitoring)
// -----------------------------------------------------------------------------

/*
  Callback function for when the temperature property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onTemperatureChange() {
  Serial.print("Cloud attempted to change Temperature to: ");
  Serial.println(temperature);
}

/*
  Callback function for when the humidity property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onHumidityChange() {
  Serial.print("Cloud attempted to change Humidity to: ");
  Serial.println(humidity);
}

/*
  Callback function for when the pressure property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onPressureChange() {
  Serial.print("Cloud attempted to change Pressure to: ");
  Serial.println(pressure);
}
