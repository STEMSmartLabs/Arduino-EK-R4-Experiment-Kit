#include "arduino_secrets.h"
// -----------------------------------------------------------------------------
// This file contains the main sketch for the Smart Home Environmental Monitor.
// It integrates DHT sensor, NeoPixel, Fan, and Buzzer with the Arduino IoT Cloud.
// Fan control is now separate from appliance control.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud, sensors, and actuators.
#include "thingProperties.h" // Auto-generated by Arduino IoT Cloud, contains Thing ID and WiFi credentials
#include <DHT.h>             // For DHT11/DHT22 Temperature and Humidity Sensor
#include <Adafruit_NeoPixel.h> // For NeoPixel Ring

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define NEOPIXEL_PIN D5      // NeoPixel ring data pin
#define NUM_PIXELS 16        // Number of NeoPixels in the ring
#define FAN_PWM_PIN D10      // PWM Fan control pin
#define DHT_PIN D8           // DHT sensor data pin
#define BUZZER_PIN D11       // Buzzer signal pin
#define ROCKER_SWITCH_PIN A3 // Rocker switch digital input (using A3 as digital)

// -----------------------------------------------------------------------------
// Sensor and Actuator Objects
// -----------------------------------------------------------------------------
DHT dht(DHT_PIN, DHT11); // Initialize DHT sensor (DHT11 or DHT22)
Adafruit_NeoPixel pixels(NUM_PIXELS, NEOPIXEL_PIN, NEO_GRB + NEO_KHZ800); // NeoPixel object

// -----------------------------------------------------------------------------
// Constants and Thresholds
// -----------------------------------------------------------------------------
const int FIRE_TEMP_THRESHOLD = 35; // Temperature in Celsius to trigger fire alarm
const int FAN_ON_SPEED = 255;   // PWM value for fan when ON (0-255)
const int FAN_OFF_SPEED = 0;    // PWM value for fan when OFF (0-255)

// -----------------------------------------------------------------------------
// Global Variables (for internal use, not directly linked to Cloud Properties)
// -----------------------------------------------------------------------------
unsigned long lastSensorReadTime = 0; // To control sensor reading frequency
const long SENSOR_READ_INTERVAL = 2000; // Read sensors every 2 seconds

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo(); // Corrected function call

  // Initialize DHT sensor
  dht.begin();
  Serial.println("DHT sensor initialized.");

  // Initialize NeoPixel ring
  pixels.begin();
  pixels.show(); // Initialize all pixels to 'off'
  Serial.println("NeoPixel initialized.");

  // Set pin modes for fan, buzzer, and rocker switch
  pinMode(FAN_PWM_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(ROCKER_SWITCH_PIN, INPUT_PULLUP); // Use internal pull-up for rocker switch

  // Ensure initial state of fan and buzzer is OFF
  analogWrite(FAN_PWM_PIN, FAN_OFF_SPEED);
  digitalWrite(BUZZER_PIN, LOW);
  pixels.clear(); // Ensure NeoPixels are off initially
  pixels.show();

  Serial.println("Setup complete.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state
  ArduinoCloud.update();

  // Read sensors periodically
  if (millis() - lastSensorReadTime > SENSOR_READ_INTERVAL) {
    readSensors();
    lastSensorReadTime = millis();
  }

  // Handle fire alarm logic (priority over appliance control for buzzer/NeoPixel color)
  handleFireAlarm();

  // Handle physical appliance switch (for NeoPixel control)
  handleNeoPixelControl();

  // Handle fan control (now separate)
  handleFanControl();
}

// -----------------------------------------------------------------------------
// Function to read DHT sensor and update Cloud properties
// -----------------------------------------------------------------------------
void readSensors() {
  // Read Temperature and Humidity
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // Check if any reads failed and exit early (to try again next loop)
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    temperature = t; // Update Cloud property
    humidity = h;    // Update Cloud property
    Serial.print("Temp: "); Serial.print(temperature); Serial.print("Â°C, Hum: "); Serial.print(humidity); Serial.println("%");
  }
}

// -----------------------------------------------------------------------------
// Function to handle fire alarm logic
// -----------------------------------------------------------------------------
void handleFireAlarm() {
  // Check for fire condition based on temperature threshold
  if (temperature > FIRE_TEMP_THRESHOLD) {
    fireAlarmActive = true; // Set Cloud property to active
    digitalWrite(BUZZER_PIN, HIGH); // Turn on buzzer
    pixels.fill(pixels.Color(255, 0, 0), 0, NUM_PIXELS); // Set all pixels to red
    pixels.show();
    Serial.println("FIRE ALARM: HIGH TEMPERATURE DETECTED!");
  } else {
    // If temperature is below threshold, turn off buzzer and set alarm inactive
    fireAlarmActive = false; // Set Cloud property to inactive
    digitalWrite(BUZZER_PIN, LOW); // Turn off buzzer
    // NeoPixel color will be handled by handleNeoPixelControl if alarm is off
  }
}

// -----------------------------------------------------------------------------
// Function to handle NeoPixel control (physical rocker switch and Cloud's applianceSwitch)
// -----------------------------------------------------------------------------
void handleNeoPixelControl() {
  // Read the physical rocker switch state
  // Assuming HIGH when switch is ON, LOW when OFF (with INPUT_PULLUP)
  bool physicalSwitchState = !digitalRead(ROCKER_SWITCH_PIN); // Invert for common switch wiring

  // If the physical switch state differs from the cloud property, update the cloud property
  // This ensures the cloud dashboard reflects the physical switch state for NeoPixel
  if (physicalSwitchState != applianceSwitch) {
    applianceSwitch = physicalSwitchState;
    Serial.print("Physical rocker switch changed NeoPixel state to: ");
    Serial.println(applianceSwitch ? "ON" : "OFF");
  }

  // Control NeoPixel based on applianceSwitch state,
  // but only if the fire alarm is NOT active (fire alarm has priority for NeoPixel color)
  if (!fireAlarmActive) {
    if (applianceSwitch) {
      pixels.fill(pixels.Color(0, 255, 0), 0, NUM_PIXELS); // Set all pixels to green
      pixels.show();
      Serial.println("NeoPixel ON (Green)");
    } else {
      pixels.clear(); // Turn all pixels off
      pixels.show();
      Serial.println("NeoPixel OFF");
    }
  }
}

// -----------------------------------------------------------------------------
// Function to handle Fan control (Cloud's fanControlSwitch)
// -----------------------------------------------------------------------------
void handleFanControl() {
  // fanControlSwitch is declared in thingProperties.h
  if (fanControlSwitch) {
    analogWrite(FAN_PWM_PIN, FAN_ON_SPEED); // Turn fan ON
    Serial.println("Fan ON");
  } else {
    analogWrite(FAN_PWM_PIN, FAN_OFF_SPEED); // Turn fan OFF
    Serial.println("Fan OFF");
  }
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks
// -----------------------------------------------------------------------------

/*
  Callback function for when the applianceSwitch property changes in the Cloud.
  This allows remote control of the NeoPixel.
*/
void onApplianceSwitchChange() {
  Serial.print("Cloud changed Appliance Switch (NeoPixel) to: ");
  Serial.println(applianceSwitch ? "ON" : "OFF");
  // handleNeoPixelControl() will pick up this change in the next loop iteration.
}

/*
  Callback function for when the fanControlSwitch property changes in the Cloud.
  This allows remote control of the fan.
*/
void onFanControlSwitchChange() {
  Serial.print("Cloud changed Fan Control Switch to: ");
  Serial.println(fanControlSwitch ? "ON" : "OFF");
  // handleFanControl() will pick up this change in the next loop iteration.
}

/*
  Callback function for when the fireAlarmActive property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring
  if the Cloud attempts to write to it (which it shouldn't for a read-only property).
*/
void onFireAlarmActiveChange() {
  Serial.print("Cloud attempted to change Fire Alarm Active to: ");
  Serial.println(fireAlarmActive ? "ACTIVE" : "OFF");
  // This callback should ideally not be triggered as fireAlarmActive is 'Read' only
  // and controlled by the board's temperature sensor.
}
