// -----------------------------------------------------------------------------
// Project: IoT Motion-Activated Security System
// File: Motion_Activated_Security_System.ino
// Description: Detects motion using a PIR sensor. When motion is detected and
//              the system is armed, it activates a local alarm (buzzer, LED)
//              and sends alerts to the Arduino IoT Cloud. Includes Cloud
//              properties to arm/disarm the system and reset the alarm.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud and actuators.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <Arduino_ConnectionHandler.h> // For WiFi connection

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define PIR_SENSOR_PIN D2      // Digital pin for PIR Motion Sensor (e.g., HC-SR501)
#define BUZZER_PIN D11         // Digital pin for Buzzer signal
#define ALERT_LED_PIN D5       // Digital pin for LED to indicate alarm status

// -----------------------------------------------------------------------------
// Global Variables (for internal use, not directly linked to Cloud Properties)
// -----------------------------------------------------------------------------
unsigned long lastMotionTime = 0; // To track when motion was last detected
const long ALARM_DURATION = 5000; // Alarm sounds for 5 seconds (if not reset by cloud)

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Set pin modes for PIR sensor, buzzer, and LED
  pinMode(PIR_SENSOR_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(ALERT_LED_PIN, OUTPUT);

  // Ensure initial state of outputs is OFF and system is disarmed
  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(ALERT_LED_PIN, LOW);
  alarmActive = false; // Initialize Cloud property
  motionDetected = false; // Initialize Cloud property
  systemArmed = false; // Initialize Cloud property (start disarmed by default)
  resetAlarm = false;  // Initialize Cloud property

  Serial.println("Setup complete for Motion-Activated Security System.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // Check for motion and handle alarm logic
  handleSecuritySystem();

  // Handle cloud-initiated alarm reset
  handleResetAlarm();
}

// -----------------------------------------------------------------------------
// Function to handle the security system logic
// -----------------------------------------------------------------------------
void handleSecuritySystem() {
  // Read PIR sensor state
  int motionSensorState = digitalRead(PIR_SENSOR_PIN);

  // Update motionDetected Cloud property
  if (motionSensorState == HIGH) {
    if (!motionDetected) { // Only print if state changes
      Serial.println("Motion Detected!");
    }
    motionDetected = true;
  } else {
    if (motionDetected) { // Only print if state changes
      Serial.println("Motion Cleared.");
    }
    motionDetected = false;
  }

  // If motion is detected AND the system is armed AND the alarm is not already active
  if (motionDetected && systemArmed && !alarmActive) {
    Serial.println("INTRUSION DETECTED! Activating Alarm...");
    alarmActive = true;    // Set Cloud property to active
    lastMotionTime = millis(); // Record time of alarm activation
    digitalWrite(BUZZER_PIN, HIGH); // Turn on buzzer
    digitalWrite(ALERT_LED_PIN, HIGH); // Turn on LED
  }

  // If alarm is active, manage its duration or wait for reset
  if (alarmActive) {
    // If alarm duration has passed and it hasn't been reset by cloud
    if (millis() - lastMotionTime >= ALARM_DURATION && !resetAlarm) {
      Serial.println("Alarm duration ended. Deactivating alarm.");
      alarmActive = false;      // Deactivate alarm
      digitalWrite(BUZZER_PIN, LOW); // Turn off buzzer
      digitalWrite(ALERT_LED_PIN, LOW); // Turn off LED
    }
  }
}

// -----------------------------------------------------------------------------
// Function to handle cloud-initiated alarm reset
// -----------------------------------------------------------------------------
void handleResetAlarm() {
  // If the cloud "resetAlarm" switch is turned ON, and the alarm is active,
  // then reset the alarm. The cloud will then likely turn this switch OFF.
  if (resetAlarm && alarmActive) {
    Serial.println("Cloud initiated alarm reset.");
    alarmActive = false;      // Deactivate alarm
    digitalWrite(BUZZER_PIN, LOW); // Turn off buzzer
    digitalWrite(ALERT_LED_PIN, LOW); // Turn off LED
    // It's good practice to reset the Cloud property back to false after action
    resetAlarm = false; // Reset the cloud property so the switch goes back to OFF
  }
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks
// -----------------------------------------------------------------------------

/*
  Callback function for when the systemArmed property changes in the Cloud.
  This allows remote arming/disarming of the security system.
*/
void onSystemArmedChange() {
  Serial.print("Cloud changed System Armed to: ");
  Serial.println(systemArmed ? "ARMED" : "DISARMED");
  // If disarmed, ensure alarm is off immediately
  if (!systemArmed) {
    alarmActive = false;
    digitalWrite(BUZZER_PIN, LOW);
    digitalWrite(ALERT_LED_PIN, LOW);
    Serial.println("System disarmed. Alarm deactivated.");
  }
}

/*
  Callback function for when the resetAlarm property changes in the Cloud.
  This allows remote resetting of the alarm.
*/
void onResetAlarmChange() {
  Serial.print("Cloud changed Reset Alarm to: ");
  Serial.println(resetAlarm ? "TRUE" : "FALSE");
  // The handleResetAlarm() function will process this change.
}

/*
  Callback function for when the motionDetected property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onMotionDetectedChange() {
  Serial.print("Cloud attempted to change Motion Detected to: ");
  Serial.println(motionDetected ? "TRUE" : "FALSE");
}

/*
  Callback function for when the alarmActive property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onAlarmActiveChange() {
  Serial.print("Cloud attempted to change Alarm Active to: ");
  Serial.println(alarmActive ? "TRUE" : "FALSE");
}
