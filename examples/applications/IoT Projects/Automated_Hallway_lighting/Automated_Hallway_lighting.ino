// -----------------------------------------------------------------------------
// Project: IoT Automated Entryway/Hallway Lighting
// File: Automated_Entryway_Lighting.ino
// Description: Provides automatic lighting when motion is detected using a PIR sensor.
//              Can be manually overridden or configured remotely via the Arduino IoT Cloud.
// -----------------------------------------------------------------------------

// Include necessary libraries for Arduino IoT Cloud.
#include "thingProperties.h"   // Auto-generated by Arduino IoT Cloud
#include <Arduino_ConnectionHandler.h> // For WiFi connection

// -----------------------------------------------------------------------------
// Pin Definitions
// -----------------------------------------------------------------------------
#define PIR_SENSOR_PIN D2      // Digital pin for PIR Motion Sensor (e.g., HC-SR501)
#define LIGHT_CONTROL_PIN D5   // Digital pin for controlling the light (LED or Relay)

// -----------------------------------------------------------------------------
// Constants
// -----------------------------------------------------------------------------
const long MOTION_READ_INTERVAL = 500; // Read PIR sensor every 0.5 seconds
unsigned long lastMotionDetectedMillis = 0; // Timestamp of the last motion detection

// -----------------------------------------------------------------------------
// Setup Function: Runs once when the board starts
// -----------------------------------------------------------------------------
void setup() {
  // Initialize Serial communication for debugging
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  // Initialize Arduino IoT Cloud properties
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level for more detailed output
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Set pin modes for PIR sensor and light control
  pinMode(PIR_SENSOR_PIN, INPUT);
  pinMode(LIGHT_CONTROL_PIN, OUTPUT);

  // Ensure light is off and default Cloud properties
  digitalWrite(LIGHT_CONTROL_PIN, LOW);
  lightOn = false;           // Manual light control off
  autoLightEnabled = true;   // Auto mode enabled by default
  lightDelayMinutes = 5;     // Default 5 minutes delay
  motionDetected = false;    // No motion initially

  Serial.println("Setup complete for Automated Entryway Lighting.");
}

// -----------------------------------------------------------------------------
// Loop Function: Runs repeatedly
// -----------------------------------------------------------------------------
void loop() {
  // Update Arduino IoT Cloud state (sends/receives data)
  ArduinoCloud.update();

  // Read motion sensor periodically
  if (millis() - lastMotionDetectedMillis > MOTION_READ_INTERVAL) {
    readMotionSensor();
  }

  // Handle automatic light control
  handleAutomaticLighting();

  // Manage manual light control (overrides auto)
  manageManualLightControl();
}

// -----------------------------------------------------------------------------
// Function to read PIR motion sensor and update Cloud property
// -----------------------------------------------------------------------------
void readMotionSensor() {
  int pirState = digitalRead(PIR_SENSOR_PIN);

  // Update motionDetected Cloud property
  if (pirState == HIGH) {
    if (!motionDetected) {
      Serial.println("Motion Detected!");
    }
    motionDetected = true;
    lastMotionDetectedMillis = millis(); // Update last motion time
  } else {
    // Motion sensor output is LOW, but motionDetected stays true for the delay period
    // It will be set to false by handleAutomaticLighting() if no motion for long enough
    if (motionDetected && (millis() - lastMotionDetectedMillis > (long)lightDelayMinutes * 60 * 1000L)) {
        Serial.println("No motion for delay period. Motion status cleared.");
        motionDetected = false;
    }
  }
}

// -----------------------------------------------------------------------------
// Function to handle automatic light control based on motion and delay
// -----------------------------------------------------------------------------
void handleAutomaticLighting() {
  if (autoLightEnabled) {
    if (motionDetected) {
      // If motion is detected, ensure light is ON
      if (!lightOn) { // Only change if currently off
        digitalWrite(LIGHT_CONTROL_PIN, HIGH);
        lightOn = true; // Update Cloud property
        Serial.println("Auto Light ON (Motion detected).");
      }
    } else {
      // If no motion and delay has passed, turn light OFF
      if (lightOn && (millis() - lastMotionDetectedMillis > (long)lightDelayMinutes * 60 * 1000L)) {
        digitalWrite(LIGHT_CONTROL_PIN, LOW);
        lightOn = false; // Update Cloud property
        Serial.println("Auto Light OFF (No motion for delay).");
      }
    }
  }
}

// -----------------------------------------------------------------------------
// Function to manage manual light control (overrides automatic)
// -----------------------------------------------------------------------------
void manageManualLightControl() {
  // If auto mode is disabled, the light is directly controlled by the lightOn Cloud property
  if (!autoLightEnabled) {
    if (digitalRead(LIGHT_CONTROL_PIN) != lightOn) { // Check if physical state matches cloud state
      digitalWrite(LIGHT_CONTROL_PIN, lightOn ? HIGH : LOW);
      Serial.print("Manual Light Control: ");
      Serial.println(lightOn ? "ON" : "OFF");
    }
  }
}

// -----------------------------------------------------------------------------
// Arduino IoT Cloud Callbacks
// -----------------------------------------------------------------------------

/*
  Callback function for when the lightOn property changes in the Cloud.
  This allows manual control of the light.
*/
void onLightOnChange() {
  Serial.print("Cloud changed Light On to: ");
  Serial.println(lightOn ? "TRUE" : "FALSE");
  // If auto mode is disabled, apply change immediately
  // Otherwise, auto mode will manage the light state
  if (!autoLightEnabled) {
    digitalWrite(LIGHT_CONTROL_PIN, lightOn ? HIGH : LOW);
  }
}

/*
  Callback function for when the autoLightEnabled property changes in the Cloud.
  This enables/disables the motion-activated lighting feature.
*/
void onAutoLightEnabledChange() {
  Serial.print("Cloud changed Auto Light Enabled to: ");
  Serial.println(autoLightEnabled ? "TRUE" : "FALSE");
  // If auto mode is disabled, ensure light state is managed by manual control.
  // If auto mode is enabled, the light state will be managed by motion.
  if (!autoLightEnabled) {
    // When auto is disabled, set light to match current lightOn property
    digitalWrite(LIGHT_CONTROL_PIN, lightOn ? HIGH : LOW);
  }
}

/*
  Callback function for when the lightDelayMinutes property changes in the Cloud.
  This sets the duration for the light to stay on after motion.
*/
void onLightDelayMinutesChange() {
  Serial.print("Cloud changed Light Delay Minutes to: ");
  Serial.println(lightDelayMinutes);
  // No direct action needed here, handleAutomaticLighting() will respect this value.
}

/*
  Callback function for when the motionDetected property changes in the Cloud.
  This is a read-only property, so this callback is primarily for debugging/monitoring.
*/
void onMotionDetectedChange() {
  Serial.print("Cloud attempted to change Motion Detected to: ");
  Serial.println(motionDetected ? "TRUE" : "FALSE");
}
